=====================  arrays => tableaux ============================================
Qu'est-ce qu'un tableau en JavaScript ?
Un tableau (Array) en JavaScript est une structure de 
données qui permet de stocker plusieurs valeurs dans une seule variable.
Il peut contenir des nombres, des chaînes de caractères, 
des objets, voire d'autres tableaux (tableaux imbriqués).




// Création d'un tableau
// Il existe plusieurs façons de créer un tableau en JavaScript :

let fruits = ["Pomme", "Banane", "Orange"]; // Tableau de chaînes
let nombres = [1, 2, 3, 4, 5]; // Tableau de nombres
let mixte = [1, "Texte", true, { nom: "JS" }]; // Tableau mixte
let vide = new Array(); // Création avec le constructeur Array

// 🔹 Accès aux éléments et modification
// On accède aux éléments d'un tableau via leur index (commence à 0).

console.log(fruits[0]); // "Pomme"
fruits[1] = "Mangue"; // Modifier un élément
console.log(fruits.length); // 3 → Nombre d'éléments dans le tableau
//!-----------------------------------------------------------------
// 🔄 Itération sur un Tableau en JavaScript
// L'itération consiste à parcourir un tableau élément
// par élément pour exécuter une action sur chaque valeur.

// 🔹 1. Boucles classiques
// 🔸 Boucle for (classique)

let fruits = ["Pomme", "Banane", "Orange"];

for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]); // Affiche : Pomme, Banane, Orange
}

// 🔸 Boucle while
let i = 0;
while (i < fruits.length) {
  console.log(fruits[i]);
  i++;
}

// 🔹 2. Méthodes d’itération modernes
// 🔸 forEach()
// Exécute une fonction pour chaque élément du tableau.
fruits.forEach(function (fruit, index) {
  console.log(index + ": " + fruit);
});

// 🔸 for...of (ES6)
// Permet de parcourir directement les valeurs d'un tableau.
// est simple et lisible.
for (let fruit of fruits) {
  console.log(fruit);
}
// 🔸 for...in (⚠️ à utiliser avec prudence)
// Parcourt les index du tableau (et non les valeurs).
for (let index in fruits) {
  console.log(index + ": " + fruits[index]);
}

// ⚠️ Attention : for...in peut récupérer des propriétés
//  non désirées si le tableau
//  est étendu avec des propriétés personnalisées.

// ⚠️ Problèmes avec for...in sur un tableau en JavaScript
// La boucle for...in est utilisée pour parcourir les propriétés
// d'un objet, mais elle peut poser des problèmes lorsqu'on
//  l'utilise avec un tableau.

// 🔹 Problème 1 : for...in récupère les index sous forme de chaînes
// Contrairement à for...of ou forEach(),
// for...in ne donne pas directement les valeurs du
// tableau mais les index sous forme de chaînes.

let fruits = ["Pomme", "Banane", "Orange"];

for (let index in fruits) {
  console.log(typeof index); // "string", alors qu'on s'attend à un nombre
  console.log(index, fruits[index]); // Index sous forme de texte
}

// 🔹 Problème 2 : for...in peut inclure des propriétés
// ajoutées au prototype Si des propriétés personnalisées
// sont ajoutées à Array.prototype,elles seront aussi parcourues,
// ce qui peut causer des erreurs.

Array.prototype.extra = "Ne devrait pas être ici !";

let fruits = ["Pomme", "Banane", "Orange"];

for (let index in fruits) {
  console.log(index, fruits[index]);
}
// Affiche aussi : extra "Ne devrait pas être ici !" 😱
// ❌ for...in est déconseillé pour les tableaux en raison des problèmes
// d'index sous forme de chaînes et des propriétés héritées du prototype.
// ✅ Utiliser plutôt for...of, forEach(), ou une boucle for classique
// pour éviter les erreurs. 


// 🔹 Création et accès aux éléments
let arr = [1, 2, 3, 4, 5];

console.log(arr.length);        // 5 → Retourne la longueur du tableau
console.log(arr[0]);            // 1 → Accède au premier élément
console.log(arr.at(-1));        // 5 → Accède au dernier élément (ES2022)
console.log(Array.isArray(arr)); // true → Vérifie si c'est un tableau

// 🔹 Ajout et suppression d'éléments
arr.push(6);  // Ajoute à la fin → [1, 2, 3, 4, 5, 6]
arr.pop();    // Supprime le dernier élément → [1, 2, 3, 4, 5]
arr.unshift(0); // Ajoute au début → [0, 1, 2, 3, 4, 5]
arr.shift();  // Supprime le premier élément → [1, 2, 3, 4, 5]

// 🔹 Extraction et copie
console.log(arr.slice(1, 4));  // [2, 3, 4] → Extrait une partie du tableau
console.log(arr.concat([6, 7])); // [1, 2, 3, 4, 5, 6, 7] → Concatène des tableaux
console.log([...arr, 6, 7]);  // [1, 2, 3, 4, 5, 6, 7] → Même chose avec le spread operator

// 🔹 Suppression, remplacement et insertion
arr.splice(2, 1);  // Supprime 1 élément à l'index 2 → [1, 2, 4, 5]
arr.splice(2, 0, 3); // Insère 3 à l'index 2 → [1, 2, 3, 4, 5]
arr.splice(1, 2, 8, 9); // Remplace deux éléments → [1, 8, 9, 4, 5]

// 🔹 Recherche d'éléments
console.log(arr.indexOf(4));  // 3 → Index de 4
console.log(arr.lastIndexOf(4)); // 3 → Dernière occurrence de 4
console.log(arr.includes(9));  // true → Vérifie si 9 est présent
console.log(arr.find(x => x > 3)); // 4 → Premier élément > 3
console.log(arr.findIndex(x => x > 3)); // 3 → Index du premier > 3
console.log(arr.some(x => x > 10)); // false → Vérifie si au moins un élément > 10
console.log(arr.every(x => x > 0)); // true → Vérifie si tous les éléments > 0

// 🔹 Itération et transformation
arr.forEach(x => console.log(x)); // Affiche chaque élément
console.log(arr.map(x => x * 2)); // [2, 16, 18, 8, 10] → Double chaque élément
console.log(arr.filter(x => x % 2 === 0)); // [8, 4] → Garde les pairs
console.log(arr.reduce((sum, x) => sum + x, 0)); // 27 → Somme des éléments
console.log(arr.reduceRight((acc, x) => acc + x, 0)); // 27 → Idem mais de droite à gauche

// 🔹 Tri et inversion
console.log(arr.sort());  // Trie par ordre alphabétique (attention avec les nombres !)
console.log(arr.sort((a, b) => a - b));  // Tri croissant
console.log(arr.sort((a, b) => b - a));  // Tri décroissant
console.log(arr.reverse());  // Inverse l'ordre

// 🔹 Transformation en chaîne de caractères
console.log(arr.join("-"));  // "9-8-5-4-1" → Joint les éléments avec un séparateur
console.log(arr.toString()); // "9,8,5,4,1" → Convertit en chaîne

// 🔹 Remplissage et copie
arr.fill(0, 1, 3); // Remplit avec 0 de l'index 1 à 3 → [9, 0, 0, 4, 1]
console.log(arr.copyWithin(2, 0, 2)); // Copie une partie du tableau → [9, 0, 9, 0, 1]

// 🔹 Nouveautés ES6+
console.log(arr.flat()); // Aplati les tableaux imbriqués ([1, [2, 3], [4, 5]] → [1, 2, 3, 4, 5])
console.log(arr.flatMap(x => [x, x * 2])); // Applique map() puis flat()
console.log(Array.from("Hello")); // ['H', 'e', 'l', 'l', 'o'] → Convertit une chaîne en tableau
console.log(Array.of(10, 20, 30)); // [10, 20, 30] → Crée un tableau à partir des arguments

// 🔹 Nouveautés ES2023+
console.log(arr.toSorted()); // Trie sans modifier l'original
console.log(arr.toReversed()); // Inverse sans modifier l'original
console.log(arr.toSpliced(1, 2, 99)); // Remplace sans modifier l'original
console.log(arr.with(2, 42)); // Remplace l'élément à l'index 2 sans modifier l'original




🔹 Exercice 1 : Manipulation de base
Crée un tableau nombres contenant les nombres [10, 20, 30, 40, 50].
Ajoute 60 à la fin du tableau.
Ajoute 5 au début du tableau.
Supprime le dernier élément.
Supprime le premier élément.
Affiche le tableau final.
📌 Méthodes à utiliser : push(), pop(), unshift(), shift()

🔹 Exercice 2 : Recherche d'éléments
Crée un tableau fruits contenant ["Pomme", "Banane", "Orange", "Mangue", "Kiwi"].
Trouve l’index de "Mangue".
Vérifie si "Fraise" est dans le tableau.
Trouve un fruit contenant la lettre "o".
Trouve le dernier fruit contenant "a".
📌 Méthodes à utiliser : indexOf(), includes(), find(), findIndex(), lastIndexOf()

🔹 Exercice 3 : Transformation de tableaux
Crée un tableau notes contenant [12, 15, 8, 19, 10].
Multiplie chaque élément par 2.
Filtre les valeurs supérieures ou égales à 20.
Trie le tableau en ordre croissant.
Transforme le tableau en une seule chaîne de caractères séparée par -.
📌 Méthodes à utiliser : map(), filter(), sort(), join()

🔹 Exercice 4 : Calculs avec reduce()
Crée un tableau prix contenant [100, 250, 300, 50, 400].
Calcule la somme totale des prix.
Trouve le prix maximum.
Trouve le prix minimum.
📌 Méthodes à utiliser : reduce(), Math.max(), Math.min()

🔹 Exercice 5 : Itération avec forEach et for...of
Crée un tableau animaux contenant ["Chat", "Chien", "Oiseau", "Poisson"].
Affiche chaque animal en majuscules avec forEach().
Affiche chaque animal avec for...of.
📌 Méthodes à utiliser : forEach(), for...of

🔹 Exercice 6 : Extraction avec slice() et splice()
Crée un tableau jours contenant ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"].
Extrais les 3 premiers jours dans un nouveau tableau avec slice().
Supprime "Mercredi" du tableau original avec splice().
📌 Méthodes à utiliser : slice(), splice()

🔹 Exercice 7 : Fusion et aplatissement
Crée deux tableaux :
hommes = ["Ali", "Youssef"]
femmes = ["Sofia", "Lina"]
Fusionne les deux tableaux en un seul personnes.
Ajoute "Samir" au début du tableau personnes.
Crée un tableau imbriqué groupe = [[1, 2], [3, 4], [5, 6]].
Aplatis le tableau groupe en un tableau simple.
📌 Méthodes à utiliser : concat(), flat()

🔹 Exercice 8 : Vérification de conditions
Crée un tableau ages contenant [18, 25, 16, 20, 30].
Vérifie si tous les âges sont supérieurs ou égaux à 18.
Vérifie si au moins un âge est inférieur à 18.
📌 Méthodes à utiliser : every(), some()













